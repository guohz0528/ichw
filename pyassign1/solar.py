{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"planets.py: Simulate the planets in solar system.\n",
    "\n",
    "__author__ = \"Haozhe Guo\"\n",
    "__pkuid__  = \"1800011809\"\n",
    "__email__  = \"guohz0528@pku.edu.cn\"\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "import math\n",
    "import turtle\n",
    "\n",
    "\n",
    "\"\"\"define a screen\n",
    "\"\"\"\n",
    "wn = turtle.Screen()\n",
    "wn.bgcolor('black')\n",
    "\"\"\"display the sun\n",
    "\"\"\"\n",
    "Phoebus = turtle.Turtle()\n",
    "Phoebus.shape('circle')\n",
    "Phoebus.color('yellow')\n",
    "Phoebus.resizemode('user')\n",
    "Phoebus.shapesize(2.00, 2.00, 1)\n",
    "\"\"\"adjust the rate of display\n",
    "\"\"\"\n",
    "turtle.tracer(21, 0.05)\n",
    "\n",
    "\n",
    "\"\"\"parameters\n",
    "[turtle,color,radius of planet,a,c,b/a,phi]\n",
    " hypothetically ,T is in proportion to a\n",
    " most of the data is fake\n",
    "\"\"\"\n",
    "Mercury = [0, 'blue', 0.52, 35, 11.0, 0, 0]\n",
    "Venus = [0, 'orange', 0.70, 64, -8.0, 0, 0]\n",
    "Earth = [0, 'green', 0.72, 90, 15.0, 0, 0]\n",
    "Mars = [0, 'red', 0.58, 135, 0.0, 0, 0]\n",
    "Jupiter = [0, 'purple', 1.40, 250, -50.0, 0, 0]\n",
    "Saturn = [0, 'gray', 1.28, 350, 150.0, 0, 0]\n",
    "Halley = [0, 'white', 0.2, 370, -350.0, 0, 0]\n",
    "\n",
    "para = [Mercury, Venus, Earth, Mars, Jupiter, Saturn, Halley]    #\n",
    "\n",
    "    \n",
    "for i in range(7):\n",
    "    \"\"\"define the turtles\n",
    "    \"\"\"\n",
    "    para[i][0] = turtle.Turtle()\n",
    "    para[i][0].shape('circle')\n",
    "    para[i][0].color(para[i][1])\n",
    "    para[i][0].resizemode('user')\n",
    "    para[i][0].shapesize(para[i][2], para[i][2], 1)\n",
    "    \"\"\"compute 'b/a'\n",
    "    \"\"\"\n",
    "    para[i][5] = (para[i][3]**2-para[i][4]**2)**0.5/para[i][3]\n",
    "    \"\"\"move the turtles to the initial coordinates\n",
    "    \"\"\"\n",
    "    para[i][0].pu()\n",
    "    para[i][0].goto(para[i][3]+para[i][4], 0)\n",
    "    para[i][0].pd()\n",
    "\n",
    "\n",
    "def starrun(tur, a, c, b_a, phi):\n",
    "    \n",
    "    x = a*math.cos(phi)\n",
    "    y = a*math.sin(phi)\n",
    "    \n",
    "    if x<-c:\n",
    "        alpha = 3*math.pi/2-phi+math.atan(y/(x+c))\n",
    "    elif x>-c:\n",
    "        alpha = math.pi/2-phi+math.atan(y/(x+c))\n",
    "    else:\n",
    "        alpha = math.pi-phi\n",
    "    \n",
    "    sin = math.sin(alpha)\n",
    "    cos = math.cos(alpha)\n",
    "    l = math.hypot(x+c, y)\n",
    "    \n",
    "    if cos<0.00000001:\n",
    "        del_phi = math.pi/3/l/sin\n",
    "    else:\n",
    "        del_phi = (sin-(sin**2-math.pi*cos/1.5/l)**0.5)/cos\n",
    "    \n",
    "    phi = phi+del_phi\n",
    "    \n",
    "    tur.goto(c+a*math.cos(phi), a*math.sin(phi)*b_a)\n",
    "    return phi\n",
    "\n",
    "\n",
    "for h in range(385):\n",
    "    for k in range(100):    #cycle for 38500 times\n",
    "        \n",
    "        for i in range(7):\n",
    "            \n",
    "            tur = para[i][0]\n",
    "            a = para[i][3]\n",
    "            c = para[i][4]\n",
    "            b_a = para[i][5]\n",
    "            phi = para[i][6]\n",
    "            \n",
    "            para[i][6] = starrun(tur, a, c, b_a, phi)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
